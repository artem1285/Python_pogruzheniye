"""
Задание №1

Вспомните какие модули вы уже проходили на курсе.
Создайте файл, в котором вы импортируете встроенные
в модуль функции под псевдонимами. (3-7 строк импорта).


from math import sin as f_1
from random import randint as rnd

print(f_1(60))
print(rnd(1, 50))

Задание №2
Создайте модуль с функцией внутри.
Функция принимает на вход три целых числа:
нижнюю и верхнюю границу и количество попыток.
Внутри генерируется случайное число в указанных
границах и пользователь должен угадать его за заданное число попыток.
Функция выводит подсказки “больше” и “меньше”.
Если число угадано, возвращается истина, а если попытки исчерпаны - ложь.

from random import randint


def func(start, stop, count):
    num = randint(start, stop)
    i = 0
    while count > i:
        u_num = int(input(f"введите число в диапазоне от {start} до {stop}:>"))
        if u_num > num:
            print('меньше!')
        elif u_num < num:
            print('больше!')
        else:
            print('Угадал!')
            return True
        i += 1
    return False


print(func(1, 3, 3))

Задание №3

Улучшаем задачу 2.
Добавьте возможность запуска функции “угадайки”
из модуля в командной строке терминала.
Строка должна принимать от 1 до 3 аргументов: параметры вызова функции.
Для преобразования строковых аргументов командной строки в
числовые параметры используйте генераторное выражение.

from random import randint
from sys import argv


def func(args):
    num = randint(args[0], args[1])
    i = 0
    while args[2] > i:
        u_num = int(input(
            f"введите число в диапазоне от {args[0]} до {args[1]}: "))
        if u_num > num:
            print('меньше!')
        elif u_num < num:
            print('больше!')
        else:
            print('Угадал!')
            return True
        i += 1
    return False


args = [int(el) for el in argv[1:]]
print(func(args))

Задание №4
Создайте модуль с функцией внутри.
Функция получает на вход загадку, список с возможными вариантами
отгадок и количество попыток на угадывание.
Программа возвращает номер попытки, с которой была отгадана
загадка или ноль, если попытки исчерпаны.



def func(qws, ans, count):
    print(f"загадка: {qws}")
    print(f"варианты ответов: {ans}")
    i = 0
    while count >= i:
        u_ans = input(f"введите ваш ответ: ")
        if u_ans == ans[0]:
            print(f'Правильно! Угадал за {i + 1} попытку')
            return i + 1
        else:
            print('Не угадал!')
            i += 1
        if i == count:
            return 0


print(func("Не лает, не кусает, в дом не пускает",
           ['замок', 'охранник', 'собака'], 3))

Задание №5

Добавьте в модуль с загадками функцию, которая хранит словарь списков.
Ключ словаря - загадка, значение - список с отгадками.
Функция в цикле вызывает загадывающую функцию,
чтобы передать ей все свои загадки.


def func(qws, ans, count):
    print(f"загадка: {qws}")
    print(f"варианты ответов: {ans}")
    i = 0
    while count >= i:
        u_ans = input(f"введите ваш ответ:>")
        if u_ans == ans[0]:
            print(f'Правильно! Угадал за {i + 1} попытку')
            return i + 1
        else:
            print('Не угадал!')
            i += 1
        if i == count:
            return 0


def func_2(dct):
    for k, v in dct.items():
        print(func(k, v, 3))


dct = {"В чем сила: ": ['в правде', 'в деньгах', 'в силе'],
       "Не лает, не кусает, в дом не пускает": ['замок', 'охранник', 'собака']}

func_2(dct)


Задание №6
Добавьте в модуль с загадками функцию,
которая принимает на вход строку (текст загадки)
 и число (номер попытки, с которой она угадана).
Функция формирует словарь с информацией о результатах отгадывания.
Для хранения используйте защищённый словарь уровня модуля.
Отдельно напишите функцию, которая выводит результаты угадывания
из защищённого словаря в удобном для чтения виде.
Для формирования результатов используйте генераторное выражение.


_dct = {}


def func(que, count):
    print(que)
    a = "в правде"

    i = 0
    while count > i:
        ans = input("Напишите ответ>")
        if ans == a:
            _dct[i + 1] = "Вы угадали"
            return
        else:
            _dct[i + 1] = "Не угадали"
            i += 1


func("В чем сила:", 3)
print(_dct)


Создайте модуль и напишите в нём функцию,
которая получает на вход дату в формате DD.MM.YYYY
Функция возвращает истину, если дата может
существовать или ложь, если такая дата невозможна.
Для простоты договоримся, что год может быть в диапазоне [1, 9999].
Весь период (1 января 1 года - 31 декабря 9999 года) действует
Григорианский календарь.
Проверку года на високосность вынести в отдельную защищённую функцию.


def dat(st):
    day, month, year = map(int, (st.split(".")))
    if year in range(1, 10000) and month in range(1, 13) and day in range(1,
                                                                          32):
        if year % 400 == 0 or year % 4 == 0 and year % 100 != 0 and month == 2:
            if day <= 29:
                return True
            else:
                return False
        if month in [1, 3, 5, 7, 8, 10, 12]:
            if day <= 31:
                return True
            else:
                return False
        elif month == 2:
            if day <= 28:
                return True
            else:
                return False
        else:
            if day <= 30:
                return True
            else:
                return False
    else:
        return False

# print(dat("29.02.2025"))
"""



















